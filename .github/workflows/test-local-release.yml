name: Test Local Package Release

on:
  workflow_dispatch:
    inputs:
      release-level:
        description: 'Release level (one of): patch, minor, major, prepatch, preminor, premajor, prerelease'
        required: true

jobs:
  local-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout project main and setup environment
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          registry-url: https://registry.npmjs.org/
          node-version: '14.17'

      # Use cache for node modules
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Install dependencies and run test
      - name: Install dependencies
        run: npm ci

      # Build the project 'dist'
      - name: Generate build
        run: npm run build

      # Move 'dist' files to root
      - name: Move distributable to root
        run: mv dist/* .

      # Git configuration
      - name: Git configuration
        run: |
          git config --global user.email "erickpetru@gmail.com"
          git config --global user.name "Erick Eduardo Petrucelli"

      # Bump package version
      # Use tag latest
      - name: Bump release version
        if: startsWith(github.event.inputs.release-level, 'pre') != true
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version version $RELEASE_LEVEL)" >> $GITHUB_ENV
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV
        env:
          RELEASE_LEVEL: ${{ github.event.inputs.release-level }}

      # Bump package pre-release version
      # Use tag beta for pre-release versions
      - name: Bump pre-release version
        if: startsWith(github.event.inputs.release-level, 'pre') && github.ref_name != 'main'
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version --preid=beta version $RELEASE_LEVEL)" >> $GITHUB_ENV
          echo "RELEASE_TAG=beta" >> $GITHUB_ENV
        env:
          RELEASE_LEVEL: ${{ github.event.inputs.release-level }}

      - name: Bump RC pre-release version
        if: startsWith(github.event.inputs.release-level, 'pre') && github.ref_name == 'main'
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version --preid=rc version $RELEASE_LEVEL)" >> $GITHUB_ENV
          echo "RELEASE_TAG=next" >> $GITHUB_ENV
        env:
          RELEASE_LEVEL: ${{ github.event.inputs.release-level }}

      # Publish version to public repository
      - name: Publish package
        run: npm pack

      # Force fail to keep docker file available
      - name: Fail last step
        run: exit 1
